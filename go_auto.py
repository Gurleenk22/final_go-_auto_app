# -*- coding: utf-8 -*-
"""go auto.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1afutO9RYXItBKWJ3kAlQI66WzftKGlmh
"""

import streamlit as st
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.preprocessing import LabelEncoder
from sklearn.decomposition import PCA

# Page config
st.set_page_config(page_title="Vehicle Popularity Finder", layout="wide")

# Load data
@st.cache_data

def load_data():
    used_df = pd.read_csv("vehicle_df_with_originals (1).csv")
    new_df = pd.read_csv("vehicle_new_df_clustered (1).csv")
    brand_used = pd.read_csv("brand_df_with_originals (1).csv")
    brand_new = pd.read_csv("brand_new_df_clustered (1).csv")
    return used_df, new_df, brand_used, brand_new

# Load all
dfs = load_data()
used_df, new_df, brand_used, brand_new = dfs

# Sidebar Nav
st.sidebar.title("Navigation")
page = st.sidebar.radio("Go to", ["🏠 Dashboard", "🚘 Vehicle Search", "📈 Brand Insights", "🎯 Cluster Profiles", "📌 Insights & Recommendations"])

# === PAGE 1: Dashboard ===
if page == "🏠 Dashboard":
    st.title("🚗 Popular Vehicle Finder Dashboard")
    st.markdown("""
    ### 🔍 Problem Statement: Vehicle Popularity Insights
    This app helps identify **popular vehicles** and **brands** based on real-world listing data.

    **Why Clustering?**
    - Group similar cars (features: model year, price, mileage, days on market)
    - Understand market trends
    - Recommend high-performing vehicle types

    **Features Used:**
    - ✅ Model Year
    - ✅ Mileage
    - ✅ Price
    - ✅ Days on Market

    **Clustering Outcomes:**
    - 🔥 Identify fast-selling vehicles
    - 📉 Spot underperforming segments
    - 📊 Support Go Auto inventory & pricing decisions
    """)

# === PAGE 2: Vehicle Search ===
elif page == "🚘 Vehicle Search":
    st.title("🔍 Explore Popular Vehicles")

    dataset_choice = st.radio("Select Dataset", ("Used Vehicles", "New Vehicles"))
    df = used_df.copy() if dataset_choice == "Used Vehicles" else new_df.copy()

    st.sidebar.header("Filter Criteria")
    year = st.sidebar.slider("Model Year", int(df.model_year.min()), int(df.model_year.max()), (2020, 2024))
    mileage = st.sidebar.slider("Mileage", int(df.mileage.min()), int(df.mileage.max()), (0, 5000))
    price = st.sidebar.slider("Price", int(df.price.min()), int(df.price.max()), (10000, 60000))
    dom = st.sidebar.slider("Days on Market", int(df.days_on_market.min()), int(df.days_on_market.max()), (0, 30))

    filtered = df[
        (df['model_year'].between(*year)) &
        (df['mileage'].between(*mileage)) &
        (df['price'].between(*price)) &
        (df['days_on_market'].between(*dom))
    ]

    st.subheader(f"Matching Vehicles: {len(filtered)}")
    st.dataframe(filtered[['original_make', 'original_model', 'model_year', 'mileage', 'price', 'days_on_market']].sort_values(by='days_on_market'))

# === PAGE 3: Brand-Level Cluster Insights ===
elif page == "📈 Brand Insights":
    st.title("📊 Popular Brand Performance")
    brand_set = st.radio("Select Dataset", ("Used Vehicles", "New Vehicles"))
    brand_df = brand_used.copy() if brand_set == "Used Vehicles" else brand_new.copy()

    dom = st.slider("Days on Market", int(brand_df.days_on_market.min()), int(brand_df.days_on_market.max()), (0, 40))
    year = st.slider("Model Year", int(brand_df.model_year.min()), int(brand_df.model_year.max()), (2020, 2024))

    brand_filtered = brand_df[
        (brand_df['days_on_market'].between(*dom)) &
        (brand_df['model_year'].between(*year))
    ]

    st.write("Brands with fast turnover (lower days_on_market are more popular):")
    st.dataframe(brand_filtered[['original_make', 'days_on_market', 'model_year', 'price', 'mileage', 'brand_cluster']].sort_values(by='days_on_market'))

# === PAGE 4: Cluster PCA Visuals ===
elif page == "🎯 Cluster Profiles":
    st.title("🎯 Cluster Visualizations")
    cluster_tab = st.radio("Choose Cluster Type", ("Vehicle-Level", "Brand-Level"))

    if cluster_tab == "Vehicle-Level":
        df = used_df.copy()
        df_clustered = df[['PCA1', 'PCA2', 'vehicle_cluster']].copy()
        fig, ax = plt.subplots()
        sns.scatterplot(data=df_clustered, x='PCA1', y='PCA2', hue='vehicle_cluster', palette='tab10', s=10, ax=ax)
        plt.title("Vehicle-Level Cluster Visualization (PCA)")
        st.pyplot(fig)

    else:
        df = brand_used.copy()
        fig, ax = plt.subplots()
        sns.scatterplot(data=df, x='PCA1', y='PCA2', hue='brand_cluster', palette='Set2', s=50, ax=ax)
        plt.title("Brand-Level Cluster Visualization (PCA)")
        st.pyplot(fig)

# === PAGE 5: Insights ===
elif page == "📌 Insights & Recommendations":
    st.title("📌 Final Insights & Strategy")
    st.markdown("""
    ### 🔑 Key Observations
    - Some clusters have vehicles with consistently low days on market → **high popularity**
    - Brands like Toyota, Honda, and Tesla dominate those clusters
    - High mileage or older vehicles usually sit in less popular clusters

    ### 📌 Business Recommendations
    - 🏆 **Focus marketing** on high-demand cluster vehicles
    - 🧠 **Use cluster features** (price, mileage, year) to prioritize listings
    - 💰 **Avoid overstocking** slow-moving clusters
    - 🔄 **Consider bundling or promotions** for underperforming vehicles

    ✅ Clustering helps **Go Auto** make smarter stocking, marketing, and pricing decisions.
    """)